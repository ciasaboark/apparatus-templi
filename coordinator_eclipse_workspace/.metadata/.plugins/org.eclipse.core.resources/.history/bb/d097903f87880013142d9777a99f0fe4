package org.apparatus_templi;

public abstract class Driver implements Runnable {
//	protected String type; //Controller or Sensor type. 
	protected final String name = null; //name of the device Empty String as default or could assign a random name if not assigned one
	public volatile int counter = 0; //used to assign the threads random names if not explicitly given one
	protected String protocol_version =" "; //this current operating protocol verison the device is running
	protected boolean running = true;

	public abstract String getModuleType();
	public abstract String getModuleName();
	public abstract void receiveCommand(String command);
	public abstract String getWidgetXML();
	public abstract String getFullPageXML();
	public abstract void will_run(); //let the thread know it is about to run
	

	void terminate() {
		running = false; //call the subclass implementation
	}

	/*
	 * If the device is not given a name during creation, it will have an empty string as default
	 * The thread's begin_execution() function (make shift constructor) can handle this. It can assign it a random
         * name. 
 	 */
	
	String getName() {
		return this.name;
	}

	void isRunning() {
		return this.running;
	}

	private void setRunning(boolean run) {
		this.running = run;
	}

	/*
	 * The devices' current running protocol verison. I.e (0.0 or 0.1) and so fourth
	*/
	public void protocol_version(String version) {
		this.protocol_version = version;
	}
}
